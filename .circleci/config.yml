# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    description: Prints Pipeline ID
    parameters:
      parameter_id:
        type: string
        default: "Hello World"
    steps:
      - run: echo << parameters.parameter_id >>
    
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
              aws cloudformation delete-stack --stackname prod-${CIRCLE_WORKFLOW_ID}

# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run:
          name: Print Hello 
          command: |
            #!/bin/bash
            chmod +x hello.sh
            ./hello.sh
            return 1
      - run:
          name: Throw Error
          command: |
            echo "Your job has been failed!"
          when: on_fail
            
  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run:
          name: Print World
          command: |
            #!/bin/bash
            chmod +x world.sh
            ./world.sh
  print_myname:
    environment:
      MYNAME: Cansel
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run: echo $MYNAME
      - print_pipeline_id:
          parameter_id: $CIRCLE_WORKFLOW_ID
      
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - run:
          name: Save Hello World Output
          command: |
            echo "Hello World!" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Read the Output
          command: |
            cat ~/output.txt
  
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}
      - run: return 1
      - destroy_environment
        when: on_fail

  deploy:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "d1:c3:52:06:4c:e8:b4:fd:99:d9:85:cb:61:ee:90:ad"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install flask
          command: |
            pip install flask
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml

  smoke_test:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Smoke Test for Google
          command: |
            #!/bin/bash
            chmod +x smoke-test.sh
            ./smoke-test.sh
      

workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      #- deploy
      #- welcome/run
      #- print_hello
      #- print_world
      #- print_myname
      #- save_hello_world_output
      #- print_output_file:
       #   requires:
       #     - save_hello_world_output
      - create_infrastructure
      #- smoke_test